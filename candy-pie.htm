<!DOCTYPE html>
<html>
  <head>
    <title>3d pie chart</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="description" content="opayra thierry vergult ebs oracle ebusiness suite payroll">
    <meta name="viewport" content="width=device-width">
    <meta name="mobile-web-app-capable" content="yes">
    
    <link rel="icon" type="image/svg+xml" href="./assets/favicon.svg">

    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="./candy-pie/candy-pie-babylon.js"></script>

    <style>
      
      /* global css variable */
      :root {
        --main-color: #009FC2;
        --opposite-color: white;
      }
      
      .container {
        display: grid;
        grid-gap: 30px;
        grid-template-columns: repeat(auto-fit, minmax(360px, 1fr));
        grid-template-rows: repeat( 1, minmax(200px, 1fr));
        font-family: QuicksandBook, Arial, sans-serif;
      }
      
      .card > .header {
        color: white;
        font-weight: bold;
        background-color: var( --main-color);
        padding: 20px;
      }

      .card > .header > .note-right {
        float: right;
        color: var( --main-color);
        font-weight: bold;
        background-color: white;
        padding-left: 8px;
        padding-right: 8px;
        padding-top: 4px;
        padding-bottom: 2px;
        margin-top: -4px;
        border-radius: 10px;
      }
      
      .card .article {
        color: var( --main-color);
        padding: 20px;
      }
      
      .card a {
        color: var( --main-color);
        font-weight: bold;
        text-decoration: inherit;
      }
      
      .card .right {
        text-align: right;
        float: right;
      }

      pre {
        background-color: rgb(255, 247, 229);
        padding: 10px;
        white-space: pre-line;
        overflow: auto;
      }

      .candy-pie-title {
        font-weight: bold;
        font-size: large;
        margin-top: 20px;
        margin-bottom: 20px;
      }

      .candy-pie-babylon-canvas {
        touch-action: none;  /* Disables browsers from handling all pan and zoom interactions */
        width: 100%;
        outline: none; /* remove outline when clicking on canvas */
        margin-top: 10px;
      }
      
    </style>

  </head>

  <body>
    <div class='container'>
      <div class='card'  id='intro'>
        <div class='header'>candy pie</div>
        <div class='article'>
          <h3>candy pie: a configurable, interactive 3d pie chart in your browser</h3>
          <p>Let's break down that sentence ..</p>
          <ul>
            <li>candy: don't take it that seriously. Pie charts are not always loved.. One should not use 3d for charts.. Negative times negative equals positive.
            <li>pie: yes indeed, a pie chart.
            <li>configurable: all options are described later. Curious which other options will prove to be interesting later on.
            <li>interactive: the result is not a static image, but a 3d object one can rotate. Or zoom into a slice.
            <li>3d: standing on the shoulders of
              <br> 
              <a href='https://www.babylonjs.com/' target="_blank">
                <img src="./candy-pie/babylonidentity.svg" width="50%">
              </a>
            <li>browser: works in a modern browser, desktop &amp; mobile.
          </ul>

          <br><br>
          <p>coming soon: open source</p>
        </div>
      </div>
      
      <div class='card' id='install'>
        <div class='header'>usage</div>
        <div class='article'>
          <p>Load the babylon.js code into your page, and add the candy-pie file.</p>
          <pre>
            &lt;script src="https://cdn.babylonjs.com/babylon.js"&gt;&lt;/script&gt;
            &lt;script src="./candy-pie/candy-pie-babylon.js"&gt;&lt;/script&gt;
          </pre>

          <p>
            Define a canvas element in your html page, and call one single javascript function to place the 3d pie chart on that canvas element. 
            All data and configuration options are defined in one single javascript object.
          </p>
          <pre>
            &lt;canvas id='candy-pie-canvas-id' class='candy-pie-babylon-canvas'&gt;&lt;/canvas&gt;

            let my_pie3d = {
            &nbsp;  'htmlCanvasId': 'candy-pie-canvas-id',
            &nbsp;  'slices': [ ..],
            &nbsp;  ..
            };
            
            candy_pie_babylon( my_pie3d);

          </pre>

          <p>Set the width, height or aspect ratio of the canvas element as desired.</p>
          
          <p>some additional css can help</p>
          <pre>
            .candy-pie-babylon-canvas {
            &nbsp; /* Disables all pan and zoom interactions */
            &nbsp; touch-action: none; 
            &nbsp; /* remove outline when clicking on canvas */
            &nbsp; outline: none; 
            }
          </pre>

        </div>
      </div>

      <div class='card' id='minimal'>
        <div class='header'>minimal</div>
        <div class='article'>
          <div class='candy-pie-title'>minimal, default candy pie (no extra configuration)</div>

          <p>A pie chart with 3 equal slices. Each slice is specified by
            <ul>
              <li>a value, which maps to the relative height of each slice
              <li>a color, which can be specified in several formats (see later)
            </ul>
          </p>
          <p>All other options are defaulted, except the id of the canvas where one wants the 3d pie chart to show up.</p>

          <div>
            <canvas id='candy-pie-id00' class='candy-pie-babylon-canvas'></canvas>
    
            <script>
              let pie3d_default = {
                'htmlCanvasId': 'candy-pie-id00',
                'slices': [
                  { 'value': 100, 'color': 'indianred'},
                  { 'value': 100, 'color': 'steelblue'},
                  { 'value': 100, 'color': 'olive'}
                ]
              };
              
              candy_pie_babylon( pie3d_default);
            </script>
    
            <pre>
              let pie3d_default = {
                'htmlCanvasId': 'candy-pie-babylon-canvas-id-default',
                'slices': [
                &nbsp;  { 'value': 100, 'color': 'indianred'},
                &nbsp;  { 'value': 100, 'color': 'steelblue'},
                &nbsp;  { 'value': 100, 'color': 'olive'}
                ]
              };
                          
              // call the 3d pie function with the above settings
              candy_pie_babylon( pie3d_default);
            </pre>
    
          </div>

        </div>
      </div>

      <div class='card' id='1stOptions'>
        <div class='header'>some options</div>
        <div class='article'>
            <p>The same pie chart, but with some extra space between the slices, and a donut hole. And a lightgrey background.
              Simply set the following options in the pie3d object:
            <ul>
              <li><i>spaceBetweenSlices</i>: default false, set to true in case
              <li><i>innerRadiusPct</i>: default 0, set a higher number to have a donut
              <li><i>backgroundColor</i>: set the color of the background of the canvas
            </ul>
          </p>

          <div>
            <canvas id='candy-pie-id01' class='candy-pie-babylon-canvas'></canvas>
    
            <script>
              let pie3d_2 = {
                'htmlCanvasId': 'candy-pie-id01',
                'slices': [
                  { 'value': 100, 'color': 'indianred'},
                  { 'value': 100, 'color': 'steelblue'},
                  { 'value': 100, 'color': 'olive'}
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 40,
                'backgroundColor': 'lightgrey'
              };
              
              candy_pie_babylon( pie3d_2);
            </script>
    
            <pre>
              let pie3d_2 = {
                'htmlCanvasId': 'candy-pie-id01',
                'slices': [
                 &nbsp; { 'value': 100, 'color': 'indianred'},
                 &nbsp; { 'value': 100, 'color': 'steelblue'},
                 &nbsp; { 'value': 100, 'color': 'olive'}
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 40,
                'backgroundColor': 'lightgrey'
              };
            </pre>
    
          </div>

        </div>
      </div>


      <div class='card' id='options2'>
        <div class='header'>some more options</div>
        <div class='article'>
            <p>The same pie chart, but now without vertical rotation, the initial camera angle position is a little lower, so the donut shows more flat, and when you click a slice, the slice extends a little:
            <ul>
              <li><i>allowVerticalRotation</i>: default true, now set to false. So now only horizontal rotation is possible.
              <li><i>cameraDegreesY</i>: the camera position is set to 60 degrees, a little higher than the default 45 degrees. As such the donut is seen more flat.
              <li><i>clickScalePct</i>: When clicking on a slice, the slice will grow a certain percentage, as been set here. Default 0%; so no zooming at all. Click once again to return to the original state.
            </ul>
          </p>

          <div>
            <canvas id='candy-pie-id03' class='candy-pie-babylon-canvas' style="aspect-ratio: 3/2;"></canvas>
    
            <script>
              let pie3d_3 = {
                'htmlCanvasId': 'candy-pie-id03',
                'slices': [
                  { 'value': 100, 'color': 'indianred'},
                  { 'value': 100, 'color': 'steelblue'},
                  { 'value': 100, 'color': 'olive'}
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 40,
                'backgroundColor': 'lightgrey',
                // 3 more options
                'cameraDegreesY': 30,
                'allowVerticalRotation': false,
                'clickScalePct': 20
              };
              
              candy_pie_babylon( pie3d_3);
            </script>
    
            <pre>
              
              &nbsp; 'cameraDegreesY': 30,
              &nbsp; 'allowVerticalRotation': false,
              &nbsp; 'clickScalePct': 20
              
            </pre>
    
          </div>

        </div>
      </div>


      <div class='card' id='labels'>
        <div class='header'>labels</div>
        <div class='article'>
          <p>Describe the 5 label options.</p>
        </div>
      </div>


      <div class='card' id='variable'>
        <div class='header'>Variable height & arc</div>
        <div class='article'>
          <div id='title1' class='candy-pie-title'>candy pie with variable height and arc</div>

          <p>Until now, all pie charts had slices with the same size. Changing the value of the slices changes the relative height. And setting the arc percentage drives the "width" of each slice.</p>
          
          <p>As an example, a pie chart with 5 slices, variable height and a variable arc (slice 4 is smaller, applepie is larger than the others).</p>

          <pre>
            'slices': [
              { 'value': 140, 'arcPct': 20, 'color': 'indianred', ..},
              { 'value': 120, 'arcPct': 20, 'color': 'steelblue', ..},
              { 'value': 100, 'arcPct': 20, 'color': 'olive', ..},
              { 'value': 60,  'arcPct': 10, 'color': 'aliceblue', ..},
              { 'value': 100, 'arcPct': 30, 'color': '#F5DEB3', ..}
          </pre>
          <p>ps 1: in case the total matches 100%, all slices will make a full pie. So also a 3 quarter pie is doable.</p>
          <p>ps 2: the background color is taken from the title above. Can be handy when you want to reuse colors of your site in the pie.</p>

          <div>
            <canvas id='candy-pie-babylon-canvas-id' class='candy-pie-babylon-canvas' style="aspect-ratio: 16/9"></canvas>

            <script>
              let pie3d = {
                'htmlCanvasId': 'candy-pie-babylon-canvas-id',
                'slices': [
                  { 'value': 140, 'arcPct': 1/5 * 100, 'color': 'indianred', 'label': 'one'},
                  { 'value': 120, 'arcPct': 1/5 * 100, 'color': 'steelblue', 'label': 'two'},
                  { 'value': 100, 'arcPct': 1/5 * 100, 'color': 'olive',     'label': 'three'},
                  { 'value':  60, 'arcPct': 1/10 * 100, 'color': 'aliceblue', 'label': 'four'},
                  { 'value': 100, 'arcPct': 3/10 * 100, 'color': '#F5DEB3',   'label': 'apples'} // color: wheat
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 40, // use 0 to get rid of the donut hole
                'showLabel': true,
                'showValue': false,
                'backgroundColor': window.getComputedStyle( document.getElementById( 'title1')).color,
                'clickScalePct': 20,
                'verticalFactor': 1.6 // increment this number in case you want higher vertical slices
              };
              
              candy_pie_babylon( pie3d);
            </script>

          </div>
          
        </div>
      </div>


      <div class='card' id='vertical'>
        <div class='header'>higher slices</div>
        <div class='article'>
          <div class='candy-pie-title'>candy pie with vertically stretched slices</div>
          <p>This pie chart has also 5 slices, all with same width (arc), but the slices are made higher than in the previous pie chart. 
            This is done via the <i>verticalFactor</i> configuration option.</p>
  
        <div>
          <canvas id='candy-pie-babylon-canvas-id2' class='candy-pie-babylon-canvas' style="width:80%; margin-left: 10%; aspect-ratio: 1/1"></canvas>
  
          <script>
            let pie3d2 = {
              'htmlCanvasId': 'candy-pie-babylon-canvas-id2',
              'slices': [
                { 'value': 100, 'arcPct': 1/5 * 100, 'color': 'indianred', 'label': 'one'},
                { 'value':  80, 'arcPct': 1/5 * 100, 'color': 'steelblue', 'label': 'two'},
                { 'value': 120, 'arcPct': 1/5 * 100, 'color': 'olive',     'label': 'three'},
                { 'value':  80, 'arcPct': 1/5 * 100, 'color': 'aliceblue', 'label': 'four'},
                { 'value': 120, 'arcPct': 1/5 * 100, 'color': '#F5DEB3',   'label': 'apples'} // color: wheat
              ],
              'spaceBetweenSlices': true,
              'innerRadiusPct': 40, // use 0 to get rid of the donut hole
              'showValue': true,
              'showLabel': true,
              'labelFontFactor': 1.5,
              'backgroundColor': 'rgb(155, 102, 102)',
              'clickScalePct': 20,
              'verticalFactor': 4
            };
            
            candy_pie_babylon( pie3d2);
          </script>
  
        </div>    
        </div>
      </div>



      <div class='card' id='holidays'>
        <div class='header'>holiday chart</div>
        <div class='article'>

          <div class='candy-pie-title'>holiday pie chart</div>
          <p>This pie chart has 4 equal slices. Some label-configuration options are used to position & color the labels on the pie.</p>
          <div>
            <canvas id='candy-pie-babylon-canvas-id3' class='candy-pie-babylon-canvas' style="width:75%; margin-left: 12%; aspect-ratio: 4/3"></canvas>

            <script>
              candy_pie_babylon( {
                'htmlCanvasId': 'candy-pie-babylon-canvas-id3',
                'slices': [
                  { 'value': 1, 'color': 'lightblue', 'label': 'swimming'},
                  { 'value': 1, 'color': '#f8f6e1',   'label': 'ice cream'},
                  { 'value': 1, 'color': 'lightblue', 'label': 'cocktails'},
                  { 'value': 1, 'color': '#f8f6e1',   'label': 'relaxing'}
                ],
                'spaceBetweenSlices': true,
                'innerRadiusPct': 25, // use 0 to get rid of the donut hole
                'showLabel': true,
                'labelFontFactor': 2.5,
                'labelExtraTopMargin': 20,
                'labelColor': 'rgb(155, 102, 102)',
                'backgroundColor': 'rgba(196,238,216,255)', // green-ish
                'clickScalePct': 0,
                'verticalFactor': 2,
                'allowVerticalRotation' : false,
                'cameraDegreesY': 30
              });
            </script>

            <pre>

  'labelFontFactor': 2.5,
  'labelExtraTopMargin': 20,
  'labelColor': 'rgb(155, 102, 102)',
  'backgroundColor': 'rgba(196,238,216,255)', // green-ish
  'clickScalePct': 0,
  'verticalFactor': 2,
  'allowVerticalRotation' : false,
  'cameraDegreesY': 60

            </pre>

          </div>
          
        </div>
      </div>


            

      <div class='card' id='colors'>
        <div class='header'>colors</div>
        <div class='article'>
          <p>Describe some options to define a color.</p>
          <p>always a string</p>
          <ul>
            <li>named colors</li>
            <li>hexadecimal value</li>
            <li>rgb function call</li>
            <li>javascript function returning a valid color string</li>
          </ul>
        </div>
      </div>

    </div>
    
</body>
</html>

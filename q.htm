<!doctype html>
  <html lang=en>
  <head>
    <meta charset=utf-8>
    <title>sol arch - questionnaire</title>

    <style>
      body {
        margin: 20px;
      }

      .offering {
        background-color: steelblue;
        color: white;
      }

      .offering>td {
        padding: 5px;
        padding-top: 10px;
      }

      td[title] {
        font-weight: bold;
      }

      input[type='checkbox'] { 
        margin-left: 20%;
      }

      .review-sol-arch {
        background-color: khaki;
      }

      .review-sol-arch>td {
        padding: 5px;
        padding-top: 10px;
      }
    </style>

  </head>
  
  <body>
    <div>
      <span>Customer profile &nbsp; &nbsp;</span>
      <span><input type="text" id="customer" name="customer"></span>
    </div>
    <br>

    <button onclick="copyColumn();">Add country / step</button>

    <br><br>
    <div>
      <table>
        <tr>
          <td>Country</td>
          <td id="id-c01-q01"><input type="text"></td>
        </tr>
        <tr>
          <td>LPE</td>
          <td id="id-c01-q02"><input type="text"></td>
        </tr>
        <tr>
          <td title="Use this, in case a country is first implemented as GRO - templated,&#10; and then upgraded to FLO/PRO">step</td>
          <td id="id-c01-q03"><input type="number" min="1" max="2" value="1"></td>
        </tr>
        <tr>
          <td>Headcount</td>
          <td id="id-c01-q04"><input type="number"></td>
        </tr>
        <tr>
          <td>Offering</td>
          <td id="id-c01-q05">
            <input type="radio" name="offering-col01" value="gro" onchange="setReadOnly( this.dataset.colnr, this.value);"><label>GRO</label><br>
            <input type="radio" name="offering-col01" value="flo" onchange="setReadOnly( this.dataset.colnr, this.value);"><label>FLO</label><br>
            <input type="radio" name="offering-col01" value="pro" onchange="setReadOnly( this.dataset.colnr, this.value);"><label>PRO</label>
          </td>
        </tr>

        <tr class="offering">
          <td>GRO</td>
          <td id="id-c01-gro"></td>
        </tr>
      
        <tr>
          <td>with point-to-point?</td>
          <td id="id-c01-q06" class="gro"><input type="checkbox"></td>
        </tr>
        
        <tr class="offering">
          <td>FLO :&nbsp; &nbsp; ERP to LPE</td>
          <td id="id-c01-flo"></td>
        </tr>

        <tr>
          <td>ERP &nbsp; &nbsp; &#126;</td>
          <td id="id-c01-q07" class="flo"><input list="erps" onchange="calcSolArch( this.dataset.colnr);"></td>
        </tr>
        <tr>
          <td>Protime?</td>
          <td id="id-c01-q08" class="flo"><input type="checkbox"></td>
        </tr>
        <tr>
          <td>Other T&A tool? &nbsp; &nbsp; &#126;</td>
          <td id="id-c01-q09" class="flo"><input type="checkbox" onchange="calcSolArch( this.dataset.colnr);"></td>
        </tr>
        <tr>
          <td>Other inbound interfaces? &nbsp; &nbsp; &#126;</td>
          <td id="id-c01-q10" class="flo"><input type="checkbox" onchange="calcSolArch( this.dataset.colnr);"></td>
        </tr>
        <tr>
          <td>with Data Enichment? (SDWP)</td>
          <td id="id-c01-q11" class="flo"><input type="checkbox"></td>
        </tr>
        <tr>
          <td>Readiness OK?</td>
          <td id="id-c01-q12" class="flo"><input type="checkbox"></td>
        </tr>

        <tr class="offering">
          <td>PRO</td>
          <td id="id-c01-pro"></td>
        </tr>

        <tr>
          <td>Protime?</td>
          <td id="id-c01-q13" class="pro"><input type="checkbox"></td>
        </tr>
        <tr>
          <td>Other T&A tool? &nbsp; &nbsp; &#126;</td>
          <td id="id-c01-q14" class="pro"><input type="checkbox" onchange="calcSolArch( this.dataset.colnr);"></td>
        </tr>
        <tr>
          <td title="inbound & outbound,&#10; but no payroll output">Other interfaces? &nbsp; &nbsp; &#126;</td>
          <td id="id-c01-q15" class="pro"><input type="checkbox" onchange="calcSolArch( this.dataset.colnr);"></td>
        </tr>
        <tr>
          <td>Move not only basic HR to SDWP?  &nbsp; &nbsp; &#126;</td>
          <td id="id-c01-q16" class="pro"><input type="checkbox" onchange="calcSolArch( this.dataset.colnr);"></td>
        </tr>
        <tr>
          <td title="- low: Excel, Office driven, a lot of manual work&#10;- medium&#10;- high">Complexity of actual HR landscape &#126;</td>
          <td id="id-c01-q17" class="pro"><input list="complexities"  onchange="calcSolArch( this.dataset.colnr);"></td>
        </tr>
        <tr>
          <td>Readiness OK?</td>
          <td id="id-c01-q18" class="pro"><input type="checkbox"></td>
        </tr>

        <tr class="review-sol-arch">
          <td>Review with soluttion architect</td>
          <td id="id-c01-sol">-</td>
        </tr>
      </table>
    </div>

    <datalist id="erps">
      <option value="Workday">
      <option value="SuccessFactors">
      <option value="Others">
    </datalist>

    <datalist id="complexities">
      <option value="Low">
      <option value="Medium">
      <option value="High">
    </datalist>

    <br><br><br>
    <p>to do</p>
    <ul>
      <li>some responsive design (mobile ok-ish)</li>
    </ul>
  </body>

  <script>
    iiSol = {};
    iiSol.colCount = 1;

    // set the column nr on all elements & children of column 1.
    let col1 = document.querySelectorAll('[id^="id-c01-"]');
    for (let i=0; i < col1.length; i++) {
      let ele_from_col1 = col1[i];
      ele_from_col1.setAttribute('data-colnr', iiSol.colCount);
      
      for (const child of ele_from_col1.children) {
        child.setAttribute('data-colnr', iiSol.colCount);
      }
    }

    function copyColumn() {

      iiSol.colCount = iiSol.colCount + 1;

      let col1 = document.querySelectorAll('[id^="id-c01-"]');
      
      for (let i=0; i < col1.length; i++) {
        let table_data = col1[i];
        //console.log( table_data.id);

        let table_row = table_data.closest('tr');
        //console.log( table_row);

        let clone = table_data.cloneNode(true);
        clone.id = table_data.id.replace( 'c01', 'c' + String( iiSol.colCount).padStart(2, '0'));

        clone.setAttribute('data-colnr', iiSol.colCount);

        for (const child of clone.children) {
          //console.log(child.tagName, child.name);
          child.setAttribute('data-colnr', iiSol.colCount);

          if (child.name === 'offering-col01') {
            child.name = 'offering-col' + + String( iiSol.colCount).padStart(2, '0');
          }
        }

        table_row.appendChild(clone);
      }
    };

    function disableCells(bool, offering, colNr) {
      // has class offering and the child has the correct colnr
      let selector = "." + offering + " [data-colnr='" + colNr + "']";
      console.log( selector, bool);

      let matches = document.querySelectorAll( selector);
      console.log( matches.length, matches);

      for (var i = 0; i < matches.length; i++) {
        matches[i].disabled=bool;
      }
    }

    function setReadOnly (colNr, offering) {
      console.log('set read only', colNr, offering);

      
      disableCells( true, 'gro', colNr);
      disableCells( true, 'flo', colNr);
      disableCells( true, 'pro', colNr);
      

      disableCells( false, offering.toLowerCase(), colNr);
    }

    function solArchDifferentFrom( pColNr, pQuestionNr, pCompare, pNote) {
      let plus = 0;
      const id = 'id-c' + String( pColNr).padStart(2, '0') + '-q'  + String( pQuestionNr).padStart(2, '0');
      const val = document.getElementById( id).firstChild.value;
      
      if ( val && val.toLowerCase() != pCompare.toLowerCase()) {
        console.log( 'Sol Arch in column', pColNr, ':', val, pNote);
        plus = 1;
      }

      return plus;
    }

    function solArchBool( pColNr, pQuestionNr, pNote) {
      let plus = 0;
      const id = 'id-c' + String( pColNr).padStart(2, '0') + '-q'  + String( pQuestionNr).padStart(2, '0');
      const bool = document.getElementById( id).firstChild.checked;
      
      if ( bool) {
        console.log( 'Sol Arch in column', pColNr, ':', pNote);
        plus = 1;
      }

      return plus;
    }

    function calcSolArch( pColNr) {
      
      //console.log( 'soll', pColNr, pTopic, pValue, pNote);
      let score = 0;

      // all ERP except Workday
      score = score + solArchDifferentFrom( pColNr,  7, 'Workday', 'erp');

      score = score + solArchBool( pColNr,  9, 'other T&A');
      score = score + solArchBool( pColNr, 10, 'other interface');

      score = score + solArchBool( pColNr, 14, 'other T&A');
      score = score + solArchBool( pColNr, 15, 'other interface');
      score = score + solArchBool( pColNr, 16, 'not only basic HR');

      // all complexities except low
      score = score + solArchDifferentFrom( pColNr, 17, 'Low', 'complexity');
      
      console.log( 'final score on column', pColNr, ':', score);

      let id = 'id-c' + String( pColNr).padStart(2, '0') + '-sol';
      if (score > 0) {
        document.getElementById(id).innerHTML = 'Yes';
      } else {
        document.getElementById(id).innerHTML = '-';
      }
      
    }
  </script>
</html>